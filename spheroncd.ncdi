include_guard "spheroncd"

template _spheroncd {
    objref_arg(_arg0) config;
    alias(@_arg1) stty;
    alias(@_arg2) python;
    alias(@_arg3) spherojoy_dir;
    
    refhere() main;
    
    process_manager() run_mgr;
    
    refhere() main;
    
    process_manager() main_mgr;
    main_mgr->start(@_spheroncd_input_watcher, {});
}

template _spheroncd_input_watcher {
    objref(^_caller.main) main;
    
    sys.watch_directory("/dev/input/by-id") dir_watcher_event;
    
    If (@val_equal(dir_watcher_event.filename, main.config.joy_dev)) {
        If (@val_equal(dir_watcher_event.event_type, @added)) {
            main.run_mgr->start(@run, @_spheroncd_run, {dir_watcher_event.filepath});
        } Elif (@val_equal(dir_watcher_event.event_type, @removed)) {
            main.run_mgr->stop(@run);
        };
    };
    
    dir_watcher_event->nextevent();
}

template _spheroncd_run {
    objref(^_caller.main) main;
    objref(^main.config) config;
    alias(@_arg0) joy_dev_path;
    
    log_fr(@notice, {"Running (joystick detected)"}, {"Stopping (joystick gone or exit)"});
    
    value([]) joy_positions;
    Do {
        joy_positions->insert(config.turbo_button, "0");
        joy_positions->insert(config.calibrate_button, "0");
        joy_positions->insert(config.blink_button, "0");
        Foreach (main.config.joy_axis_def As axis_name: default) {
            joy_positions->insert(@concat("ABS_", axis_name), default);
        };
    };
    
    blocker(@true) joy_event_signal;
    
    var("0") last_adjust;
    var(@none) last_color;
    var(@false) adjustment_release;
    
    refhere() global;
    
    process_manager() mgr;
    mgr->start(@_spheroncd_joystick_events, {});
    mgr->start(@_spheroncd_sphero, {});
}

template _spheroncd_joystick_events {
    objref(^_caller.global) global;
    objref(^global.config) config;
    objref(^global.joy_positions) joy_positions;
    
    # It may take some time for udev to set device permissions.
    # This is not critical since NCD keeps retrying the sys.evdev.
    sleep("100");
    
    sys.evdev(global.joy_dev_path) joy_event;
    
    If (config.print_joy_events) {
        println(joy_event.code, " ", joy_event.value);
    };
    
    joy_positions->try_get(joy_event.code) positions_entry;
    If (positions_entry.exists) {
        joy_positions->replace(joy_event.code, joy_event.value);
        global.joy_event_signal->up();
        joy_event->nextevent();
    };
    
    joy_event->nextevent();
}

template _spheroncd_sphero {
    objref(^_caller.global) global;
    
    log(@notice, "Using Sphero device ", global.config.sphero_dev);
    
    var(@true) first_time;
    backtrack_point() retry_connect;
    If (@not(first_time)) {
        sleep("5000");
    };
    first_time->set(@false);
    
    runonce({global.main.stty, "-F", global.config.sphero_dev, "115200", "raw", "-echo"}, ["term_on_deinit":@true, "keep_stderr":@true]) stty_exec;
    If (@val_different(stty_exec.exit_status, "0")) {
        log(@error, "Failed to stty the Sphero device");
        retry_connect->go();
    };
    
    sys.connect({@device, global.config.sphero_dev}) connection;
    If (connection.is_error) {
        log(@error, "Sphero device error");
        retry_connect->go();
    };
    
    log(@notice, "Opened Sphero device");
    
    value({}) send_queue;
    blocker(@true) send_event;
    
    blocker(@true) ping_reset_signal;
    
    depend_scope() depsc;
    
    refhere() dev;
    
    process_manager() mgr;
    mgr->start(@_spheroncd_read_task, {});
    mgr->start(@_spheroncd_send_task, {});
    mgr->start(@_spheroncd_ping_task, {});
    mgr->start(@_spheroncd_control_task, {});
    mgr->start(@_spheroncd_calculator_task, {});
    
    call(@_spheroncd_set_back_led, {^dev, "255"});
}

template _spheroncd_read_task {
    objref(^_caller.dev) dev;
    
    backtrack_point() read_again;
    
    dev.connection->read() recvd_data;
    If (recvd_data.eof) {
        log(@error, "Read EOF on Sphero device");
        dev.retry_connect->go();
    };
    
    read_again->go();
}

template _spheroncd_send_task {
    objref(^_caller.dev) dev;
    
    backtrack_point() next_message;
    
    Do {
        dev.send_event->use();
        If (@val_equal(dev.send_queue.length, "0")) {
            if(@false);
        };
    };
    
    dev.send_queue->get("0") message;
    dev.send_queue->remove("0");
    
    dev.connection->write(message);
    
    next_message->go();
}

template _spheroncd_enqueue_packet {
    objref_arg(_arg0) dev;
    alias(@_arg1) reset_timeout;
    alias(@_arg2) want_answer;
    alias(@_arg3) device_id;
    alias(@_arg4) command_id;
    alias(@_arg5) seq_num;
    value(_arg6) data;
    
    Do {
        If (@num_greater_equal(dev.send_queue.length, dev.global.config.max_sendq_len)) {
            log(@warning, "send queue exhausted");
            _do->break();
        };
        
        value("") message;
        
        message->append(@struct_encode({
            {@u8, "255"},
            {@u8, @num_add("252", @num_add(@if(reset_timeout, "2", "0"), @if(want_answer, "1", "0")))},
            {@u8, device_id},
            {@u8, command_id},
            {@u8, seq_num},
            {@u8, @num_add(data.length, "1")}
        }));
        
        message->append(data);
        
        message->substr("2") checksumed_data;
        message->append(@struct_encode({
            {@u8, @checksum(@inverted_sum_bytes, checksumed_data)}
        }));
        
        dev.send_queue->append(message);
        dev.send_event->downup();
    };
}

template _spheroncd_ping_task {
    objref(^_caller.dev) dev;
    
    dev.ping_reset_signal->use();
    sleep("2000");
    call(@_spheroncd_enqueue_packet, {^dev, @true, @true, "0", "1", "0", ""});
    dev.ping_reset_signal->downup();
}

template _spheroncd_control_task {
    objref(^_caller.dev) dev;
    objref(^dev.global) global;
    objref(^global.config) config;
    objref(^global.joy_positions) joy_positions;
    
    compile_search(" ") search_space;
    
    config.joy_axis_min->get("X") min_x;
    config.joy_axis_min->get("Y") min_y;
    config.joy_axis_min->get("RZ") min_rz;
    config.joy_axis_min->get("THROTTLE") min_throttle;
    config.joy_axis_max->get("X") max_x;
    config.joy_axis_max->get("Y") max_y;
    config.joy_axis_max->get("RZ") max_rz;
    config.joy_axis_max->get("THROTTLE") max_throttle;
    config.min_color->get("0") minc_r;
    config.min_color->get("1") minc_g;
    config.min_color->get("2") minc_b;
    config.max_color->get("0") maxc_r;
    config.max_color->get("1") maxc_g;
    config.max_color->get("2") maxc_b;
    
    backtrack_point() control_again;
    
    global.joy_event_signal->down();
    
    joy_positions->get("ABS_X") pos_x;
    joy_positions->get("ABS_Y") pos_y;
    joy_positions->get("ABS_RZ") pos_rz;
    joy_positions->get("ABS_THROTTLE") pos_throttle;
    joy_positions->get(config.turbo_button) turbo;
    joy_positions->get(config.calibrate_button) adjust;
    joy_positions->get(config.blink_button) blink;
    
    var(global.last_adjust) old_adjust;
    global.last_adjust->set(adjust);
    
    var(@concat(
        pos_x,        " ", min_x,        " ", max_x,        " ",
        pos_y,        " ", min_y,        " ", max_y,        " ",
        pos_rz,       " ", min_rz,       " ", max_rz,       " ",
        pos_throttle, " ", min_throttle, " ", max_throttle, " ",
        minc_r,       " ", minc_g,       " ", minc_b,       " ",
        maxc_r,       " ", maxc_g,       " ", maxc_b,       " ",
        config.rz_degrees, " ", turbo, " ", adjust, " ",
        config.dead_disk_radius, "\n"
    )) calc_request;
    
    call(@_spheroncd_calc_operation, {^dev, calc_request}) calc_op;
    search_space->explode(calc_op.response) resp_fields;
    value(resp_fields) resp_fields;
    
    resp_fields->get("0") calc_heading;
    resp_fields->get("1") calc_speed;
    resp_fields->get("2") color_r;
    resp_fields->get("3") color_g;
    resp_fields->get("4") color_b;
    
    var({color_r, color_g, color_b}) color;
    If (@val_different(blink, "0")) {
        color->set(config.blink_color);
    };
    
    If (@val_different(color, global.last_color)) {
        global.last_color->set(color);
        value(color) color;
        color->get("0") red;
        color->get("1") green;
        color->get("2") blue;
        call(@_spheroncd_set_led_output, {^dev, red, green, blue, "0"});
    };
    
    If (@and(@num_different(old_adjust, "0"), @num_equal(adjust, "0"))) {
        call(@_spheroncd_set_heading, {^dev, calc_heading});
        
        global.adjustment_release->set(@true);
    };
    
    If (@num_equal(calc_speed, "0")) {
        global.adjustment_release->set(@false);
    };
    
    call(@_spheroncd_roll, {^dev, @if(global.adjustment_release, "0", calc_speed), calc_heading, "1"});
    
    dev.ping_reset_signal->downup();
    
    sleep(config.control_delay);
    
    global.joy_event_signal->use();
    control_again->go();
}

template _spheroncd_calculator_task {
    objref(^_caller.dev) dev;
    objref(^dev.global) global;

    var(@true) first_time;
    backtrack_point() try_again;
    If (@not(first_time)) {
        sleep("1000");
    };
    first_time->set(@false);
    
    var({global.main.python, "-B", @concat(global.main.spherojoy_dir, "/calculator.py")}) cmd;
    
    sys.start_process(cmd, "rw", ["keep_stderr": @true]) proc;
    If (proc.is_error) {
        log(@error, "Process error");
        try_again->go();
    };
    
    proc->read_pipe() read_pipe;
    If (read_pipe.is_error) {
        log(@error, "Read pipe error");
        try_again->go();
    };
    
    proc->write_pipe() write_pipe;
    If (write_pipe.is_error) {
        log(@error, "Write pipe error");
        try_again->go();
    };
    
    dev.depsc->provide(@calculator);
}

template _spheroncd_calc_operation {
    objref_arg(_arg0) dev;
    alias(@_arg1) request;
    
    value("") response;
    
    Do {
        dev.depsc->depend({@calculator}) calc;
        value("") buffer;
        
        calc.write_pipe->write(request);
        
        backtrack_point() read_again;
        calc.read_pipe->read() read_data;
        If (@not(read_data.not_eof)) {
            log(@error, "Got EOF from calculator");
            calc.try_again->go();
        };
        buffer->append(read_data);
        var(@num_subtract(buffer.length, "1")) len_minus_one;
        buffer->substr(len_minus_one) last_char;
        If (@val_different(last_char, "\n")) {
            read_again->go();
        };
        
        buffer->substr("0", len_minus_one) without_newline;
        response->reset(without_newline);
    };
}

template _spheroncd_set_heading {
    objref_arg(_arg0) dev;
    alias(@_arg1) heading;
    
    call(@_spheroncd_enqueue_packet, {^dev, @true, @false, "2", "1", "0", @struct_encode({
        {@u16b, heading}
    })});
}

template _spheroncd_roll {
    objref_arg(_arg0) dev;
    alias(@_arg1) speed;
    alias(@_arg2) heading;
    alias(@_arg3) state;
    
    call(@_spheroncd_enqueue_packet, {^dev, @true, @false, "2", "48", "0", @struct_encode({
        {@u8, speed},
        {@u16b, heading},
        {@u8, state}
    })});
}

template _spheroncd_set_led_output {
    objref_arg(_arg0) dev;
    alias(@_arg1) red;
    alias(@_arg2) green;
    alias(@_arg3) blue;
    alias(@_arg4) persist;
    
    call(@_spheroncd_enqueue_packet, {^dev, @true, @false, "2", "32", "0", @struct_encode({
        {@u8, red},
        {@u8, green},
        {@u8, blue},
        {@u8, @if(persist, "1", "0")}
    })});
}

template _spheroncd_set_back_led {
    objref_arg(_arg0) dev;
    alias(@_arg1) bright;
    
    call(@_spheroncd_enqueue_packet, {^dev, @true, @false, "2", "33", "0", @struct_encode({
        {@u8, bright}
    })});
}
